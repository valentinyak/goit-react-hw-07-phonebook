{"version":3,"sources":["components/ContactList/ContactItem/ContactItem.module.css","redux/contacts/contacts-actions.js","redux/filter/filter-actions.js","redux/filter/filter-reducer.js","redux/contacts/contacts-reducer.js","redux/store.js","redux/services/contacts-api.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","redux/contacts/contacts-operations.js","components/ContactList/ContactItem/ContactItem.js","redux/filter/filter-selectors.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactsRequest","addContactsSuccess","addContactsError","deleteContactsRequest","deleteContactsSuccess","deleteContactsError","changeFilter","filterReducer","createReducer","_","payload","items","contactsActions","action","state","filter","id","isLoading","error","contactsReducer","combineReducers","rootReducer","contacts","store","configureStore","reducer","BASE_URL","addContactToDB","contact","axios","post","deleteContactFromDB","delete","getAllContacts","getContactById","createSelector","find","connect","dispatch","addContact","a","contactsAPI","useSelector","type","name","onClick","e","preventDefault","target","form","nameInput","phoneInput","value","alert","shortid","generate","number","ContactItem","className","s","deletBtn","getFilterValue","getFilteredContacts","toLowerCase","includes","onDelete","useDispatch","handleDelete","useEffect","get","then","response","data","map","onChange","currentTarget","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55837f78.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"deletBtn\":\"ContactItem_deletBtn__37rpo\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactsRequest = createAction(\n  'contacts/fetchContactsRequest',\n);\nexport const fetchContactsSuccess = createAction(\n  'contacts/fetchContactsSuccess',\n);\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\nexport const addContactsRequest = createAction('contacts/addContactsRequest');\nexport const addContactsSuccess = createAction('contacts/addContactsSuccess');\nexport const addContactsError = createAction('contacts/addContactsError');\nexport const deleteContactsRequest = createAction(\n  'contacts/deleteContactsRequest',\n);\nexport const deleteContactsSuccess = createAction(\n  'contacts/deleteContactsSuccess',\n);\nexport const deleteContactsError = createAction('contacts/deleteContactsError');\n","import { createAction } from '@reduxjs/toolkit';\n\nconst changeFilter = createAction('filter/changeFilter');\n\nexport default changeFilter;\n","import { createReducer } from '@reduxjs/toolkit';\nimport changeFilter from './filter-actions';\n\nconst filterReducer = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default filterReducer;\n","import { createReducer, combineReducers } from '@reduxjs/toolkit';\nimport * as contactsActions from './contacts-actions';\nimport filterReducer from '../filter/filter-reducer';\n\nconst items = createReducer([], {\n  [contactsActions.fetchContactsSuccess]: (_, action) => action.payload,\n  [contactsActions.addContactsSuccess]: (state, action) => [\n    ...state,\n    action.payload,\n  ],\n  [contactsActions.deleteContactsSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload.id),\n});\nconst isLoading = createReducer(false, {\n  [contactsActions.fetchContactsRequest]: () => true,\n  [contactsActions.fetchContactsSuccess]: () => false,\n  [contactsActions.fetchContactsError]: () => false,\n\n  [contactsActions.addContactsRequest]: () => true,\n  [contactsActions.addContactsSuccess]: () => false,\n  [contactsActions.addContactsError]: () => false,\n\n  [contactsActions.deleteContactsRequest]: () => true,\n  [contactsActions.deleteContactsSuccess]: () => false,\n  [contactsActions.deleteContactsError]: () => false,\n});\nconst error = createReducer(null, {\n  [contactsActions.fetchContactsError]: (_, action) => action.payload,\n  [contactsActions.fetchContactsRequest]: () => null,\n  [contactsActions.fetchContactsSuccess]: () => null,\n\n  [contactsActions.addContactsError]: (_, action) => action.payload,\n  [contactsActions.addContactsRequest]: () => null,\n  [contactsActions.addContactsSuccess]: () => null,\n\n  [contactsActions.deleteContactsError]: (_, action) => action.payload,\n  [contactsActions.deleteContactsRequest]: () => null,\n  [contactsActions.deleteContactsSuccess]: () => null,\n});\n\nconst contactsReducer = combineReducers({\n  items,\n  isLoading,\n  error,\n  filter: filterReducer,\n});\n\nexport default contactsReducer;\n","import { combineReducers } from 'redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst rootReducer = combineReducers({\n  contacts: contactsReducer,\n});\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nexport default store;\n","import axios from 'axios';\n\nconst BASE_URL = 'http://localhost:3004/contacts';\n\nexport const getContacts = () => {\n  const contacts = axios.get(BASE_URL).then(response => response.data);\n\n  return contacts;\n};\nexport const addContactToDB = contact => {\n  axios.post(BASE_URL, contact);\n};\nexport const deleteContactFromDB = contact => {\n  axios.delete(`${BASE_URL}/${contact.id}`);\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getAllContacts = state => state.contacts.items;\nexport const getContactById = createSelector(\n  [getAllContacts, (_, id) => id],\n  (contacts, id) => contacts.find(contact => contact.id === id),\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport { connect, useSelector } from 'react-redux';\n\nimport * as contactsActions from '../../redux/contacts/contacts-operations';\nimport { getAllContacts } from '../../redux/contacts/contacts-selectors';\nimport './ContactForm.module.css';\n\nfunction ContactForm({ addContact }) {\n  const state = useSelector(state => state);\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const { nameInput, phoneInput } = e.target.form;\n    const isContactExist = getAllContacts(state).find(\n      contact => contact.name === nameInput.value,\n    );\n\n    if (isContactExist) {\n      alert(`${nameInput.value} is already in contacts`);\n      return;\n    }\n\n    addContact({\n      id: shortid.generate(),\n      name: nameInput.value,\n      number: phoneInput.value,\n    });\n\n    nameInput.value = '';\n    phoneInput.value = '';\n  };\n\n  return (\n    <form>\n      <label>\n        Insert contact name\n        <input type=\"text\" name=\"nameInput\" />\n      </label>\n\n      <label>\n        Insert contact number\n        <input type=\"text\" name=\"phoneInput\" />\n      </label>\n\n      <button type=\"submit\" onClick={handleSubmit}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nconst mapDispatchToProps = dispatch => ({\n  addContact: contact => dispatch(contactsActions.addContact(contact)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n\nContactForm.propTypes = {\n  addContact: PropTypes.func,\n};\n","import * as contactsAPI from '../services/contacts-api';\nimport * as contactsActions from './contacts-actions';\n\nexport const fetchContacts = () => async dispatch => {\n  dispatch(contactsActions.fetchContactsRequest());\n\n  try {\n    const contacts = await contactsAPI.getContacts();\n\n    dispatch(contactsActions.fetchContactsSuccess(contacts));\n  } catch (error) {\n    dispatch(contactsActions.fetchContactsError(error));\n  }\n};\n\nexport const addContact = contact => async dispatch => {\n  dispatch(contactsActions.addContactsRequest());\n\n  try {\n    contactsAPI.addContactToDB(contact);\n    dispatch(contactsActions.addContactsSuccess(contact));\n  } catch (error) {\n    dispatch(contactsActions.addContactsError(error));\n  }\n};\n\nexport const deleteContact = contact => async dispatch => {\n  dispatch(contactsActions.deleteContactsRequest());\n\n  try {\n    contactsAPI.deleteContactFromDB(contact);\n    dispatch(contactsActions.deleteContactsSuccess(contact));\n  } catch (error) {\n    dispatch(contactsActions.deleteContactsError(error));\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactItem.module.css';\n\nexport default function ContactItem({ contact, onClick }) {\n  const { name, number, id } = contact;\n\n  return (\n    <span>\n      {name}: {number}{' '}\n      <button className={s.deletBtn} id={id} onClick={onClick}>\n        delete\n      </button>\n    </span>\n  );\n}\n\nContactItem.propTypes = {\n  contact: PropTypes.objectOf(PropTypes.string),\n  onClick: PropTypes.func,\n};\n","import { createSelector } from '@reduxjs/toolkit';\nimport { getAllContacts } from '../contacts/contacts-selectors';\n\nexport const getFilterValue = state => state.contacts.filter;\nexport const getFilteredContacts = createSelector(\n  [getAllContacts, getFilterValue],\n  (contacts, filter) =>\n    contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase()),\n    ),\n);\n","import React, { useEffect } from 'react';\nimport { connect, useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport ContactItem from './ContactItem/ContactItem';\nimport * as contactsActions from '../../redux/contacts/contacts-operations';\nimport * as contactsOperations from '../../redux/contacts/contacts-operations';\nimport { getContactById } from '../../redux/contacts/contacts-selectors';\nimport { getFilteredContacts } from '../../redux/filter/filter-selectors';\n\nfunction ContactList({ contacts, onDelete }) {\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n  const handleDelete = e => {\n    const contact = getContactById(state, e.target.id);\n    onDelete(contact);\n  };\n\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\n\n  return (\n    <ul>\n      {contacts.map(contact => {\n        return (\n          <li key={contact.id}>\n            <ContactItem contact={contact} onClick={handleDelete} />\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nconst mapStateToProps = state => ({\n  contacts: getFilteredContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDelete: contact => dispatch(contactsActions.deleteContact(contact)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\n  onClick: PropTypes.func,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport changeFilter from '../../redux/filter/filter-actions';\nimport { getFilterValue } from '../../redux/filter/filter-selectors';\n\nfunction Filter({ value, onChange }) {\n  return (\n    <label>\n      Find contact by name\n      <input type=\"text\" name=\"filterInput\" onChange={onChange} value={value} />\n    </label>\n  );\n}\n\nconst mapStateToProps = state => ({ value: getFilterValue(state) });\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(changeFilter(e.currentTarget.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\nFilter.propTypes = {\n  onChange: PropTypes.func,\n};\n","import React from 'react';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\nexport default function App() {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n\n      <ContactList />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport store from './redux/store';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}